# Generated by Django 5.0.4 on 2024-06-24 21:14

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='GW2_Crafting_Recipes',
            fields=[
                ('recipe_id', models.IntegerField(unique=True)),
                ('output_item_id', models.IntegerField(primary_key=True, serialize=False)),
                ('output_item_count', models.IntegerField()),
                ('ingredients', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='GW2_Items',
            fields=[
                ('item_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('item_name', models.CharField(max_length=200)),
                ('type', models.CharField(max_length=200)),
                ('venter_value', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GW2_Trading_Post_Data',
            fields=[
                ('item_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('buys', models.JSONField()),
                ('sells', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='User_Storage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_recorded', models.DateTimeField(auto_now_add=True)),
                ('item_id', models.IntegerField()),
                ('item_count', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=40, unique=True)),
                ('password', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=100)),
                ('api_key', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='User_Bank_Data',
            fields=[
                ('user_storage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='unid_processing.user_storage')),
            ],
            bases=('unid_processing.user_storage',),
        ),
        migrations.CreateModel(
            name='User_Inventory_Data',
            fields=[
                ('user_storage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='unid_processing.user_storage')),
            ],
            bases=('unid_processing.user_storage',),
        ),
        migrations.CreateModel(
            name='User_Materials_Data',
            fields=[
                ('user_storage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='unid_processing.user_storage')),
            ],
            bases=('unid_processing.user_storage',),
        ),
        migrations.CreateModel(
            name='User_Shared_Inventory_Data',
            fields=[
                ('user_storage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='unid_processing.user_storage')),
            ],
            bases=('unid_processing.user_storage',),
        ),
        migrations.CreateModel(
            name='User_Wallet_Data',
            fields=[
                ('user_storage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='unid_processing.user_storage')),
                ('currency_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            bases=('unid_processing.user_storage',),
        ),
        migrations.AddField(
            model_name='user_storage',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='User_Salvage_Rates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blue_salvage_rate', models.DecimalField(decimal_places=2, max_digits=5)),
                ('green_salvage_rate', models.DecimalField(decimal_places=2, max_digits=5)),
                ('yellow_salvage_rate', models.DecimalField(decimal_places=2, max_digits=5)),
                ('gained_item_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='unid_processing.gw2_items')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='User_Salvage_Records',
            fields=[
                ('record_number', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('salvaged_date', models.DateTimeField()),
                ('salvaged_item_id', models.IntegerField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='User_Outcome_Data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gained_item_count', models.IntegerField()),
                ('gained_item_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='unid_processing.gw2_items')),
                ('record_number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='unid_processing.user_salvage_records')),
            ],
        ),
    ]
